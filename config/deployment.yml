### INGRESS
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: hubblenews
  annotations:
    kubernetes.io/ingress.global-static-ip-name: hubblenews-ip
spec:
  backend:
    serviceName: nginx
    servicePort: 80
  rules:
  - http:
      paths:
      - path: /api/*
        backend:
          serviceName: api
          servicePort: 80

---
### SERVICE - API
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: api
  type: NodePort

---
### SERVICE - NGINX
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: nginx
  type: NodePort

---
### SERVICE - MYSQL
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
### VOLUMES
apiVersion: v1
kind: PersistentVolume
metadata:
  name: hubblenews-files
spec:
  storageClassName: ""
  capacity:
    storage: 20Gi
  accessModes:
  - ReadWriteOnce
  gcePersistentDisk:
    fsType: ext4
    pdName: disk-1

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hubblenews-claim
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 20Gi
  volumeName: hubblenews-files

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: hubblenews-mysql
spec:
  storageClassName: ""
  capacity:
    storage: 20Gi
  accessModes:
  - ReadWriteOnce
  gcePersistentDisk:
    fsType: ext4
    pdName: disk-2

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hubblenews-mysql-claim
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 20Gi
  volumeName: hubblenews-mysql

---
### STATEFULSET - API
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: api-statefulset
spec:
  selector:
    matchLabels:
      app: api
  serviceName: "api-service"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: API_IMAGE
        ports:
        - containerPort: 80
        volumeMounts:
        - name: hubblevolume
          mountPath: /home/images
        env:
        - name: API_PORT
          value: "8000"
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
      volumes:
      - name: hubblevolume
        persistentVolumeClaim:
          claimName: hubblenews-claim

---
### DEPLOYEMENT - NGINX
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: NGINX_IMAGE

---
### STATEFULSET - MYSQL
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-statefulset
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql-service"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: hubblenews-mysql-claim